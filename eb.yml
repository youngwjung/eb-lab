AWSTemplateFormatVersion: '2010-09-09'
Description: Creating VPC and IAM role for Elastic Beanstalk Environment

Resources:
# Network Configuration
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        -
          Key: Name
          Value: eb-vpc

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.0.0/24
      AvailabilityZone: ap-northeast-2a
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: eb-public-subnet-az1
    DependsOn: VPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: ap-northeast-2b
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: eb-public-subnet-az2
    DependsOn: VPC

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.2.0/24
      AvailabilityZone: ap-northeast-2c
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: eb-public-subnet-az3
    DependsOn: VPC

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: ap-northeast-2a
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: eb-private-subnet-az1
    DependsOn: VPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.11.0/24
      AvailabilityZone: ap-northeast-2b
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: eb-private-subnet-az2
    DependsOn: VPC

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.12.0/24
      AvailabilityZone: ap-northeast-2c
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: eb-private-subnet-az3
    DependsOn: VPC

  # Custom Gateways
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        -
          Key: Name
          Value: eb-igw

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
    DependsOn: [VPC, InternetGateway]

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNAT.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        -
          Key: Name
          Value: eb-nat-gateway
    DependsOn:
      - PublicSubnet1
      - EIPNAT
      - InternetGateway
      - VPCGatewayAttachment
    
  EIPNAT:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: VPC

  # Route Tables
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: eb-public-rt
    DependsOn: VPC

  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: eb-private-rt
    DependsOn: VPC

  # Routes
  RouteIGW:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: [RouteTablePublic, InternetGateway, VPCGatewayAttachment]

  RouteNAT:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
    DependsOn: [RouteTablePrivate, NATGateway, VPCGatewayAttachment]

  # Route Table Assocations
  PublicSubnet1RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet1
    DependsOn: [RouteTablePublic, PublicSubnet1]

  PublicSubnet2RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet2
    DependsOn: [RouteTablePublic, PublicSubnet2]

  PublicSubnet3RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet3
    DependsOn: [RouteTablePublic, PublicSubnet3]

  PrivateSubnet1RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnet1
    DependsOn: [RouteTablePrivate, PrivateSubnet1]

  PrivateSubnet2RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnet2
    DependsOn: [RouteTablePrivate, PrivateSubnet2]

  PrivateSubnet3RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnet3
    DependsOn: [RouteTablePrivate, PrivateSubnet3]

  # IAM roles assigned to EC2 instnaces
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  # IAM Instance profile assigned to EC2 instnaces
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref IAMRole
    DependsOn: IAMRole

  # Security Group assigned to EC2 instnaces
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ec2-sg
      GroupDescription: InstanceSecurityGroup
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: InstanceSecurityGroup

  # Cloud 9
  Cloud9:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties: 
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet1

# RDS (PostgreSQL)
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: rds-sg
      GroupDescription: RDS Security Group
      SecurityGroupIngress:
        -
          IpProtocol: TCP
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref InstanceSecurityGroup
          Description: ElasticBeanstalk Web Server

      VpcId: !Ref VPC
    DependsOn:
      - InstanceSecurityGroup

  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: RDS Subnet Group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  RDS:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: eb-postgres
      StorageType: gp2
      AllocatedStorage: 20
      Engine: postgres
      MasterUsername: master
      MasterUserPassword: asdf1234
      DBSubnetGroupName: !Ref RDSSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      PubliclyAccessible: false
    DependsOn:
      - RDSSecurityGroup
      - RDSSubnetGroup
